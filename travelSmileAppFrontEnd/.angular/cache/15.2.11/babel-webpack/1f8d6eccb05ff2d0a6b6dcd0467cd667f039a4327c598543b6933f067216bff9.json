{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,IAAID,KAAK,EAAE;MACTF,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC;QACdC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAE;OAC/C,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EACzB;;;uBAXWJ,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAY,SAAfZ,eAAe;IAAA;EAAA","names":["AuthInterceptor","constructor","authService","intercept","req","next","token","getToken","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["/home/ikram/Desktop/travelSmileApp/travelSmileAppFrontEnd/src/app/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../auth/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    if (token) {\n      req = req.clone({\n        setHeaders: { Authorization: `Bearer ${token}` }\n      });\n    }\n    return next.handle(req);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}