{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.authUrl = 'http://localhost:8080/api/auth';\n    this.isAuthenticated = new BehaviorSubject(false);\n  }\n  login(credentials) {\n    return this.http.post(`${this.authUrl}/login`, credentials);\n  }\n  signup(user) {\n    return this.http.post(`${this.authUrl}/signup`, user);\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.isAuthenticated.next(false);\n    this.router.navigate(['/login']);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  /**\n  * Show error dialog\n  * @param title\n  * @param msg\n  */\n  /*showErrorDialog(title: string, msg: string) {\n    this.dialog.open(MaterialDialogComponent, {\n      width: '300px',\n      panelClass: 'error-alert',\n      data: { title: title, msg: msg }\n    });\n  } */\n  // Cookies stuffs\n  setCookie(cname, cvalue, exdays) {\n    const d = new Date();\n    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n    const expires = 'expires=' + d.toUTCString();\n    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,MAAM;;;;AAGtC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,YAAO,GAAG,gCAAgC;IAClD,oBAAe,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;EAEU;EAE/DK,KAAK,CAACC,WAAgB;IACpB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAEF,WAAW,CAAC;EAC7D;EAEAG,MAAM,CAACC,IAAS;IACd,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,SAAS,EAAEE,IAAI,CAAC;EACvD;EAEAC,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,KAAK,CAAC;IAChC,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,QAAQ;IACN,OAAOL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EACtC;EAGC;;;;;EAKD;;;;;;;EAQG;EACHC,SAAS,CAACC,KAAa,EAAEC,MAAc,EAAEC,MAAc;IACrD,MAAMC,CAAC,GAAG,IAAIC,IAAI,EAAE;IACpBD,CAAC,CAACE,OAAO,CAACF,CAAC,CAACG,OAAO,EAAE,GAAIJ,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC;IACvD,MAAMK,OAAO,GAAG,UAAU,GAAGJ,CAAC,CAACK,WAAW,EAAE;IAC5CC,QAAQ,CAACC,MAAM,GAAGV,KAAK,GAAG,GAAG,GAAGC,MAAM,GAAG,GAAG,GAAGM,OAAO,GAAG,SAAS;EACpE;;;uBA5CW1B,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA8B,SAAX9B,WAAW;MAAA+B,YADE;IAAM;EAAA","names":["BehaviorSubject","AuthService","constructor","http","router","login","credentials","post","authUrl","signup","user","logout","localStorage","removeItem","isAuthenticated","next","navigate","getToken","getItem","setCookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","document","cookie","factory","providedIn"],"sourceRoot":"","sources":["/home/ikram/Desktop/travelSmileApp/travelSmileAppFrontEnd/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private authUrl = 'http://localhost:8080/api/auth';\n  isAuthenticated = new BehaviorSubject<boolean>(false);\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(credentials: any) {\n    return this.http.post(`${this.authUrl}/login`, credentials);\n  }\n\n  signup(user: any) {\n    return this.http.post(`${this.authUrl}/signup`, user);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.isAuthenticated.next(false);\n    this.router.navigate(['/login']);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n\n   /**\n   * Show error dialog\n   * @param title \n   * @param msg \n   */\n  /*showErrorDialog(title: string, msg: string) {\n    this.dialog.open(MaterialDialogComponent, {\n      width: '300px',\n      panelClass: 'error-alert',\n      data: { title: title, msg: msg }\n    });\n  } */\n\n     // Cookies stuffs\n  setCookie(cname: string, cvalue: string, exdays: number) {\n    const d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    const expires = 'expires=' + d.toUTCString();\n    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}